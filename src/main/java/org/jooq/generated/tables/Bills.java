/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.BillsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Bills extends TableImpl<BillsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bills</code>
     */
    public static final Bills BILLS = new Bills();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BillsRecord> getRecordType() {
        return BillsRecord.class;
    }

    /**
     * The column <code>public.bills.id</code>.
     */
    public final TableField<BillsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.bills.category</code>.
     */
    public final TableField<BillsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.bills.user_id</code>.
     */
    public final TableField<BillsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bills.amount</code>.
     */
    public final TableField<BillsRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.bills.tmstmp</code>.
     */
    public final TableField<BillsRecord, LocalDateTime> TMSTMP = createField(DSL.name("tmstmp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.bills.name</code>.
     */
    public final TableField<BillsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private Bills(Name alias, Table<BillsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bills(Name alias, Table<BillsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.bills</code> table reference
     */
    public Bills(String alias) {
        this(DSL.name(alias), BILLS);
    }

    /**
     * Create an aliased <code>public.bills</code> table reference
     */
    public Bills(Name alias) {
        this(alias, BILLS);
    }

    /**
     * Create a <code>public.bills</code> table reference
     */
    public Bills() {
        this(DSL.name("bills"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BILLS_USER_CATEGORY_TIME);
    }

    @Override
    public Identity<BillsRecord, Integer> getIdentity() {
        return (Identity<BillsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BillsRecord> getPrimaryKey() {
        return Keys.BILLS_PKEY;
    }

    @Override
    public Bills as(String alias) {
        return new Bills(DSL.name(alias), this);
    }

    @Override
    public Bills as(Name alias) {
        return new Bills(alias, this);
    }

    @Override
    public Bills as(Table<?> alias) {
        return new Bills(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bills rename(String name) {
        return new Bills(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bills rename(Name name) {
        return new Bills(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bills rename(Table<?> name) {
        return new Bills(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bills where(Condition condition) {
        return new Bills(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bills where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bills where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bills where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bills where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bills where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bills where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bills where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bills whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bills whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
